server:
  port: ${SERVER_PORT:8080}

spring:
  application:
        name: ${SPRING_APPLICATION_NAME}
  config:
    import: "optional:configserver:${CONFIG_SERVER_URL}"

  datasource:
    url: ${DB_URL}
    driver-class-name: ${DB_DRIVER_CLASS_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL_AUTO}
    show-sql: true
    properties:
      hibernate:
      format_sql: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: ${KAFKA_PRODUCER_KEY_SERIALIZER}
      value-serializer: ${KAFKA_PRODUCER_VALUE_SERIALIZER}
      acks: ${KAFKA_PRODUCER_ACKS}
      retries: ${KAFKA_PRODUCER_RETRIES}
      retry:
        backoff: ${KAFKA_PRODUCER_RETRY_BACKOFF}
      properties:
        spring.json.trusted.packages: ${KAFKA_PRODUCER_TRUSTED_PACKAGES}

springdoc:
  swagger-ui:
    operations-sorter: alpha
    tags-sorter: alpha
    display-request-duration: true
    enabled: true
  api-docs:
    path: /v3/api-docs

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    liveness-state:
      enabled: true
    readiness-state:
      enabled: true
    db:
      enabled: true
    kafka:
      enabled: true
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always

jwt:
  secret-key: ${JWT_SECRET_KEY}
  access-expiration-time: ${JWT_ACCESS_EXPIRATION_TIME}
  refresh-expiration-time: ${JWT_REFRESH_EXPIRATION_TIME}
  signature-algorithm: ${JWT_SIGNATURE_ALGORITHM}

token:
  password-reset:
    expiry-minutes: ${TOKEN_PASSWORD_RESET_EXPIRY_MINUTES}
  verification:
    expiry-hours: ${TOKEN_VERIFICATION_EXPIRY_HOURS}

email:
  verification:
    subject: ${EMAIL_VERIFICATION_SUBJECT}
    message: ${EMAIL_VERIFICATION_MESSAGE}
  password-reset:
    subject: ${EMAIL_PASSWORD_RESET_SUBJECT}
    message: ${EMAIL_PASSWORD_RESET_MESSAGE}

verification:
  base-url: ${VERIFICATION_BASE_URL}

event:
  topic:
    verification: ${EVENT_TOPIC_VERIFICATION}
    password-reset: ${EVENT_TOPIC_PASSWORD_RESET}

logging:
  level:
    com.rentspace.userservice: DEBUG
    org.springframework.security: INFO
    org.springdoc: INFO
    org.springframework.web: INFO
    org.hibernate.sql: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
